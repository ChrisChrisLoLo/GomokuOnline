{"version":3,"sources":["components/game/BoardCell.module.css","components/game/Game.module.css","components/game/Score.module.css","assets/icon/black.svg","assets/icon/white.svg","components/game/Message.module.css","logic/gameLogic.js","components/game/BoardCell.js","components/game/Board.js","components/game/Score.js","components/game/Message.js","logic/gameModes.js","components/game/Settings.js","components/game/Game.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","generateBoardArray","n","board","i","row","j","push","BoardCell","props","cellColor","className","useState","isHovered","setIsHovered","color","emptyCellStyle","console","error","cellStyle","backgroundColor","height","width","borderRadius","cursor","playingColor","opacity","style","onClick","playMove","onMouseEnter","onMouseLeave","Board","boardStyle","display","gridTemplateColumns","length","gridTemplateRows","gridGap","float","pointerEvents","playable","boxShadow","grid","boardCellStyle","cross","gameMode","topLeftCorner","topRightCorner","bottomLeftCorner","bottomRightCorner","topRow","bottomRow","firstColumn","lastColumn","cell","gridRow","gridColumn","key","Score","Container","Row","Col","blackScore","whiteScore","Message","message","gameModes","Settings","options","gameModeName","marginBottom","Button","resetGame","Input","type","name","onChange","e","configureGame","target","value","isOverlineAllowed","winningPieceCount","boardSize","Game","setWinningPieceCount","setIsOverlineAllowed","setRules","setGameMode","setBlackScore","setWhiteScore","setPlayingColor","setMessage","setBoard","turnNumber","setTurnNumber","newGameBtn","showNewGameBtn","setPlayable","copyBoard","map","arr","slice","sendPrompt","log","includes","setTimeout","hidden","marginLeft","newBoard","brokenRules","forEach","isWinning","dir","lineCount","countLine","mutGrid","expPiece","count","m","isWinningMove","isBoardFilled","isDraw","gameModeSettings","rules","App","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.2a9b1021.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"boardCell\":\"BoardCell_boardCell__2b-AU\",\"cross\":\"BoardCell_cross__kVRJJ\",\"topLeftCorner\":\"BoardCell_topLeftCorner__1GvWW\",\"topRow\":\"BoardCell_topRow__1Liej\",\"bottomRow\":\"BoardCell_bottomRow__1oOL4\",\"topRightCorner\":\"BoardCell_topRightCorner__1iJa7\",\"bottomLeftCorner\":\"BoardCell_bottomLeftCorner__1K2Un\",\"bottomRightCorner\":\"BoardCell_bottomRightCorner__2OHdI\",\"firstColumn\":\"BoardCell_firstColumn__2UtgW\",\"lastColumn\":\"BoardCell_lastColumn__sPJra\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sidePanel\":\"Game_sidePanel__Zz8-p\",\"center\":\"Game_center__1G4nA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"stone\":\"Score_stone__1LePR\",\"score\":\"Score_score__1HZPq\",\"numberScore\":\"Score_numberScore__3z8V8\",\"scoreBox\":\"Score_scoreBox__2RnWe\"};","module.exports = __webpack_public_path__ + \"static/media/black.d46edd4e.svg\";","module.exports = __webpack_public_path__ + \"static/media/white.c7808d18.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messageBox\":\"Message_messageBox__O7l6A\",\"message\":\"Message_message__aGPts\"};","const WHITE = 'W';\r\nconst BLACK = 'B';\r\nconst EMPTY = ' ';\r\nconst SEARCHED = '*';\r\n\r\nexport function generateBoardArray(n){\r\n    const board = [];\r\n    for (let i = 0; i < n ; i++){\r\n        let row = [];\r\n        for (let j = 0; j < n; j++){\r\n            row.push(EMPTY);\r\n        }\r\n        board.push(row);\r\n    }\r\n    return board;\r\n}\r\n\r\n/**\r\n * Copies the board.\r\n * @returns {[string][]}\r\n */\r\nexport function copyBoard(board){\r\n    return board.map(arr => arr.slice());\r\n}\r\n","import React, { useState } from \"react\";\r\nimport boardCellStyle from './BoardCell.module.css';\r\n\r\nexport default function BoardCell(props) {\r\n\r\n    let cellColor;\r\n    let className = [];\r\n    // let [isEmpty, setIsEmpty] = useState(props.color === ' ');\r\n    let [isHovered, setIsHovered] = useState(false);\r\n    switch (props.color) {\r\n        case 'W':\r\n            cellColor = 'white';\r\n            break;\r\n        case 'B':\r\n            cellColor = 'black';\r\n            break;\r\n        case ' ':\r\n            cellColor = 'goldenrod';\r\n            className = [props.emptyCellStyle];\r\n            break;\r\n        default:\r\n            console.error('invalid board color')\r\n    }\r\n\r\n    let cellStyle = {\r\n        backgroundColor: cellColor,\r\n        height: '100%',\r\n        width: '100%',\r\n        borderRadius: '50%',\r\n        '&:hover': {\r\n            width: '1000px',\r\n            cursor: 'pointer',\r\n        },\r\n    };\r\n\r\n    if (isHovered && props.color === ' ') {\r\n        cellStyle.backgroundColor = props.playingColor === 'B' ? 'black' : 'white';\r\n        cellStyle.opacity = 0.7;\r\n    }\r\n\r\n    return (\r\n        <div className={className}\r\n            style={cellStyle}\r\n            onClick={() => { props.playMove(props.i, props.j) }}\r\n            onMouseEnter={() => setIsHovered(true)}\r\n            onMouseLeave={() => setIsHovered(false)}\r\n        >\r\n        </div>\r\n    );\r\n}","import React, { useState } from \"react\";\r\nimport BoardCell from \"./BoardCell\";\r\nimport boardCellStyle from './BoardCell.module.css';\r\n\r\n// board, setBoard\r\nexport default function Board(props) {\r\n\r\n    const boardStyle = {\r\n        display: 'grid',\r\n        gridTemplateColumns: `repeat(${props.board.length}, 1fr)`,\r\n        gridTemplateRows: `repeat(${props.board.length}, 1fr)`,\r\n        gridGap: 0,\r\n        backgroundColor: 'goldenrod',\r\n        height: '50vw',\r\n        width: '50vw',\r\n        float: 'left',\r\n        pointerEvents: props.playable ? \"auto\" : \"none\",\r\n        boxShadow: '0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)'\r\n    };\r\n\r\n    const grid = [];\r\n    for (let i = 0; i < props.board.length; i++) {\r\n        let row = [];\r\n        for (let j = 0; j < props.board.length; j++) {\r\n            let emptyCellStyle = boardCellStyle.cross;\r\n            if (props.gameMode !== 'Tic Tac Toe') {\r\n                if (i === 0 && j === 0) {   //top left corner\r\n                    emptyCellStyle = boardCellStyle.topLeftCorner;\r\n                } else if (i === 0 && j === props.board.length - 1) {   //top right corner\r\n                    emptyCellStyle = boardCellStyle.topRightCorner;\r\n                } else if (i === props.board.length - 1 && j === 0) {   //bottom left corner\r\n                    emptyCellStyle = boardCellStyle.bottomLeftCorner;\r\n                } else if (i === props.board.length - 1 && j === props.board.length - 1) {   //bottom right corner\r\n                    emptyCellStyle = boardCellStyle.bottomRightCorner;\r\n                } else if (i === 0) {   //top row\r\n                    emptyCellStyle = boardCellStyle.topRow;\r\n                } else if (i === props.board.length - 1) {   //bottom row\r\n                    emptyCellStyle = boardCellStyle.bottomRow;\r\n                } else if (j === 0) {    //fist column\r\n                    emptyCellStyle = boardCellStyle.firstColumn;\r\n                } else if (j === props.board.length - 1) {    //last column\r\n                    emptyCellStyle = boardCellStyle.lastColumn;\r\n                }\r\n            }\r\n            const cell =\r\n                <div style={{ gridRow: i + 1, gridColumn: j + 1, width: '1fr', height: '1fr' }} key={`${i}_${j}`}>\r\n                    <BoardCell i={i} j={j}\r\n                        color={props.board[i][j]}\r\n                        playMove={props.playMove}\r\n                        playingColor={props.playingColor}\r\n                        emptyCellStyle={emptyCellStyle} />\r\n                </div>;\r\n\r\n\r\n            row.push(cell);\r\n        }\r\n        grid.push(row);\r\n    }\r\n\r\n    return (\r\n        <div style={boardStyle}>\r\n            {grid}\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport scoreStyle from './Score.module.css';\r\nimport black from '../../assets/icon/black.svg';\r\nimport white from '../../assets/icon/white.svg';\r\nimport Container from \"reactstrap/es/Container\";\r\nimport Row from \"reactstrap/es/Row\";\r\nimport Col from \"reactstrap/es/Col\";\r\n\r\nexport default function Score(props) {\r\n    return (\r\n        <div>\r\n            <Container>\r\n                <Row>\r\n                    <Col>\r\n                        <h3>Score</h3>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <h3>⚫: {props.blackScore}</h3>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <h3>⚪: {props.whiteScore}</h3>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport messageStyle from './Message.module.css';\r\n\r\nexport default function Message(props) {\r\n    return (\r\n        <div>\r\n            <h4>\r\n                {props.message}\r\n            </h4>\r\n        </div>\r\n    );\r\n}\r\n","export let gameModes = {\r\n    'Connect Five 15x15': {\r\n        'rules':[],\r\n        'boardSize':15,\r\n        'isOverlineAllowed':true,\r\n        'winningPieceCount':5,\r\n    },\r\n    'Connect Five 19x19': {\r\n        'rules':[],\r\n        'boardSize':19,\r\n        'isOverlineAllowed':true,\r\n        'winningPieceCount':5,\r\n    },\r\n    'Go-moku 13x13': {\r\n        'rules':[],\r\n        'boardSize':13,\r\n        'isOverlineAllowed':false,\r\n        'winningPieceCount':5,\r\n    },\r\n    'Go-moku 15x15': {\r\n        'rules':[],\r\n        'boardSize':15,\r\n        'isOverlineAllowed':false,\r\n        'winningPieceCount':5,\r\n    },\r\n    'Go-moku 19x19': {\r\n        'rules': [],\r\n        'boardSize': 19,\r\n        'isOverlineAllowed': false,\r\n        'winningPieceCount':5,\r\n    },\r\n    // 'Japanese Go-moku':{\r\n    //     'rules':[],\r\n    //     'boardSize': 19,\r\n    //     'isOverlineAllowed': false,\r\n    //     'winningPieceCount':5,\r\n    // },\r\n    // 'Korean O-muk':{\r\n    //     'rules':[],\r\n    //     'boardSize': 19,\r\n    //     'isOverlineAllowed': false,\r\n    //     'winningPieceCount':5,\r\n    // },\r\n    // 'Pro-Go-Moku':{\r\n    //     'rules':[],\r\n    //     'boardSize': 15,\r\n    //     'isOverlineAllowed': false,\r\n    //     'winningPieceCount':5,\r\n    // },\r\n    'Tic Tac Toe':{\r\n        'rules':[],\r\n        'boardSize': 3,\r\n        'isOverlineAllowed': false,\r\n        'winningPieceCount':3,\r\n    }\r\n};\r\n","import React from \"react\";\r\nimport { Button, Input } from \"reactstrap\";\r\n\r\nimport { gameModes } from \"../../logic/gameModes\";\r\n\r\nexport default function Settings(props) {\r\n    let options = [];\r\n    for (let gameModeName in gameModes) {\r\n        options.push(<option key={gameModeName}>{gameModeName}</option>)\r\n    }\r\n\r\n    function handleChange(e) {\r\n        props.configureGame(e.target.value, gameModes[e.target.value]);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div style={{marginBottom:'30px'}}>\r\n                <h4>Options</h4>\r\n                <Button onClick={() => props.resetGame(props.board.length)}>Reset</Button>\r\n            </div>\r\n            <div style={{marginBottom:'30px'}}>\r\n                <h4>Game configuration</h4>\r\n                <Input type='select' name='gameMode' onChange={handleChange}>\r\n                    {options}\r\n                </Input>\r\n            </div>\r\n            <div style={{marginBottom:'30px'}}>\r\n                <h4>Rules</h4>\r\n                <ul>\r\n                    {gameModes[props.gameMode].isOverlineAllowed === true && <li>You must connect {gameModes[props.gameMode].winningPieceCount} or more in a row to win.</li>}\r\n                    {gameModes[props.gameMode].isOverlineAllowed === false && <li>You must connect exactly {gameModes[props.gameMode].winningPieceCount} in a row to win.</li>}\r\n                    <li>The winning line of pieces can be vertical, horizontal, or diagonal.</li>\r\n                    <li>Black starts first.</li>\r\n                    <li>You play on a {gameModes[props.gameMode].boardSize}x{gameModes[props.gameMode].boardSize} board.</li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState } from 'react';\r\nimport { generateBoardArray } from '../../logic/gameLogic';\r\nimport Board from './Board';\r\nimport Score from \"./Score\";\r\nimport Message from \"./Message\";\r\nimport Settings from \"./Settings\";\r\nimport gameStyle from './Game.module.css'\r\nimport { Button, Container, Row, Col } from \"reactstrap\";\r\n\r\n\r\nconst WHITE = 'W';\r\nconst BLACK = 'B';\r\nconst EMPTY = ' ';\r\nconst SEARCHED = '*';\r\n\r\nexport default function Game() {\r\n\r\n    // Game config\r\n    const [winningPieceCount, setWinningPieceCount] = useState(5);\r\n    // const [boardSize, setBoardSize] = useState(15);\r\n    const [isOverlineAllowed, setIsOverlineAllowed] = useState(true);\r\n    const [rules, setRules] = useState([]);\r\n    const [gameMode, setGameMode] = useState('Connect Five 15x15');\r\n    // Game state\r\n    const [blackScore, setBlackScore] = useState(0);\r\n    const [whiteScore, setWhiteScore] = useState(0);\r\n    const [playingColor, setPlayingColor] = useState(BLACK);\r\n    // used to communicate information to player\r\n    const [message, setMessage] = useState('');\r\n    const [board, setBoard] = useState(generateBoardArray(15));\r\n    // turn number (used for rules and even for history recording). Starts at 0\r\n    const [turnNumber, setTurnNumber] = useState(0);\r\n\r\n    //if new game button is visible or not (only visible when game ends)\r\n    const [newGameBtn, showNewGameBtn] = useState(false);\r\n\r\n    //if board is playable\r\n    const [playable, setPlayable] = useState(true);\r\n\r\n    /**\r\n     * Configures the game according to the selected gameMode.\r\n     * gameMode JSON schema can be found in logic/gameModes.js\r\n     * @param gameModeSettings the passed in gameMode JSON object\r\n     */\r\n    function configureGame(gameMode, gameModeSettings) {\r\n        setGameMode(gameMode);\r\n        setRules(gameModeSettings.rules);\r\n        setIsOverlineAllowed(gameModeSettings.isOverlineAllowed);\r\n        setWinningPieceCount(gameModeSettings.winningPieceCount);\r\n        resetGame(gameModeSettings.boardSize);\r\n    }\r\n\r\n    /**\r\n     * Copies the board.\r\n     * @returns {[string][]}\r\n     */\r\n    function copyBoard(board) {\r\n        return board.map(arr => arr.slice());\r\n    }\r\n\r\n    /**\r\n     * Play a move when clicking on a position\r\n     * @param i the 0 indexed row position\r\n     * @param j the 0 indexed col position\r\n     * @returns {number} 0 if the move is valid, -1 if the move is invalid, and 1 if the player won\r\n     */\r\n    function playMove(i, j) {\r\n        console.log(`Turn ${turnNumber}: ${playingColor}'s move`);\r\n        let newBoard = copyBoard(board);\r\n        if (newBoard[i][j] !== EMPTY) {\r\n            sendPrompt('Cannot place your piece where one already exists!');\r\n            return -1;\r\n        }\r\n        newBoard[i][j] = playingColor;\r\n        let brokenRules = giveBrokenRules(i, j, newBoard);\r\n        if (brokenRules.length !== 0) {\r\n            sendPrompt(`Broke the following rules: ${brokenRules}`);\r\n            return -1;\r\n        }\r\n        else {\r\n            setBoard(newBoard);\r\n            setMessage('');\r\n\r\n            board.forEach((row) => {\r\n                console.log(row);\r\n            });\r\n\r\n            if (isWinningMove(i, j, newBoard)) {\r\n                if (playingColor === BLACK) {\r\n                    setBlackScore(blackScore + 1);\r\n                    sendPrompt('Black wins!');\r\n                }\r\n                else {\r\n                    setWhiteScore(whiteScore + 1);\r\n                    sendPrompt('White wins!');\r\n                }\r\n                showNewGameBtn(true);\r\n                setPlayable(false);\r\n            }\r\n            else if (isDraw(newBoard)) {\r\n                sendPrompt('It\\'s a draw!');\r\n                showNewGameBtn(true);\r\n                setPlayable(false);\r\n            }\r\n            else {\r\n                setPlayingColor(playingColor === BLACK ? WHITE : BLACK);\r\n                setTurnNumber(turnNumber + 1);\r\n                return 0\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if the board is in a draw state (no more empty pieces)\r\n     * @param board\r\n     */\r\n    function isDraw(board) {\r\n        let isBoardFilled = true;\r\n        for (let i = 0; i < board.length; i++) {\r\n            for (let j = 0; j < board.length; j++) {\r\n                if (board[i][j] === EMPTY) {\r\n                    isBoardFilled = false;\r\n                }\r\n            }\r\n        }\r\n        return isBoardFilled;\r\n    }\r\n\r\n    /**\r\n     * Return broken rules\r\n     * @returns {Array}\r\n     */\r\n    function giveBrokenRules(i, j, board) {\r\n        return []\r\n    }\r\n\r\n    /**\r\n     * Checks if a move is winning depending if there is a line of N pieces\r\n     * @param i\r\n     * @param j\r\n     * @param board\r\n     * @returns {boolean}\r\n     */\r\n    function isWinningMove(i, j, board) {\r\n        const directions = ['\\\\', '|', '-', '/'];\r\n        let isWinning = false;\r\n        directions.forEach((dir) => {\r\n            let lineCount = countLine(dir, copyBoard(board), i, j, playingColor);\r\n            if (isOverlineAllowed && lineCount >= winningPieceCount) {\r\n                isWinning = true;\r\n            }\r\n            else if (!isOverlineAllowed && lineCount === winningPieceCount) {\r\n                isWinning = true;\r\n            }\r\n        });\r\n        return isWinning;\r\n    }\r\n\r\n    /**\r\n     * Count the number of pieces of a given position\r\n     * @param dir determines the line we are counting the pieces of\r\n     * @param mutGrid is a grid we are willing to mutate. Used for recursive DFS\r\n     * @param i\r\n     * @param j\r\n     * @param expPiece is the piece we are looking for\r\n     * @returns {number}\r\n     */\r\n    function countLine(dir, mutGrid, i, j, expPiece) {\r\n        if (mutGrid[i][j] !== expPiece) {\r\n            return 0;\r\n        }\r\n\r\n        let count = 1;\r\n        mutGrid[i][j] = SEARCHED;\r\n        console.log(mutGrid);\r\n\r\n        let n = mutGrid.length - 1;\r\n        if (n === -1) console.error('The grid is malformed!');\r\n        let m = mutGrid[0].length - 1;\r\n        if (m === -1) console.error('The grid is malformed!');\r\n\r\n        switch (dir) {\r\n            case '/':\r\n                if (i - 1 >= 0 && j + 1 <= m) {\r\n                    count += countLine(dir, mutGrid, i - 1, j + 1, expPiece);\r\n                }\r\n                if (i + 1 <= n && j - 1 >= 0) {\r\n                    count += countLine(dir, mutGrid, i + 1, j - 1, expPiece);\r\n                }\r\n                break;\r\n            case '\\\\':\r\n                if (i + 1 <= n && j + 1 <= m) {\r\n                    count += countLine(dir, mutGrid, i + 1, j + 1, expPiece);\r\n                }\r\n                if (i - 1 >= 0 && j - 1 >= 0) {\r\n                    count += countLine(dir, mutGrid, i - 1, j - 1, expPiece);\r\n                }\r\n                break;\r\n            case '-':\r\n                if (j + 1 <= m) {\r\n                    count += countLine(dir, mutGrid, i, j + 1, expPiece);\r\n                }\r\n                if (j - 1 >= 0) {\r\n                    count += countLine(dir, mutGrid, i, j - 1, expPiece);\r\n                }\r\n                break;\r\n            case '|':\r\n                if (i + 1 <= m) {\r\n                    count += countLine(dir, mutGrid, i + 1, j, expPiece);\r\n                }\r\n                if (i - 1 >= 0) {\r\n                    count += countLine(dir, mutGrid, i - 1, j, expPiece);\r\n                }\r\n                break;\r\n            default:\r\n                console.error('Unknown character passed in!');\r\n        }\r\n        return count;\r\n    }\r\n\r\n    /**\r\n     * Reset game\r\n     * @param boardSize: The size of the board to reset to\r\n     */\r\n    function resetGame(boardSize) {\r\n        setPlayingColor(BLACK);\r\n        setTurnNumber(0);\r\n        setBoard(generateBoardArray(boardSize));\r\n    }\r\n\r\n    /**\r\n     * Sends a prompt to the UI. This is usually if a move is invalid or if someone has won.\r\n     * Will do more than logging in the near future.\r\n     * @param message: The message to display to the user\r\n     */\r\n    function sendPrompt(message) {\r\n        console.log(message);\r\n        setMessage(message);\r\n\r\n        if (message.includes(\"Black wins\") || message.includes(\"White wins\")) return;\r\n\r\n        setTimeout(() => {\r\n            setMessage(\"\"); //clear message after 3 seconds\r\n        }, 3000)\r\n\r\n    }\r\n\r\n    /**\r\n     * When new game is clicked the board will be reset and hide new game btn again\r\n    */\r\n    function onNewGame() {\r\n        let newBoard = copyBoard(board);\r\n        resetGame(newBoard.length);\r\n        setMessage(\"\"); //clear message\r\n        showNewGameBtn(false); //hide game btn\r\n        setPlayable(true); //make game playable again\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <Row>\r\n                <Col>\r\n                    <Score blackScore={blackScore} whiteScore={whiteScore} playingColor={playingColor} />\r\n                    <Message message={message} />\r\n                    <Button color=\"success\" hidden={!newGameBtn} onClick={onNewGame} style={{ marginLeft: \"15px\" }}>New Game</Button>\r\n                </Col>\r\n                <Col>\r\n                    <Board\r\n                        board={board}\r\n                        playMove={playMove}\r\n                        playingColor={playingColor}\r\n                        playable={playable}\r\n                        gameMode={gameMode} />\r\n                </Col>\r\n                <Col>\r\n                    <Settings resetGame={resetGame} board={board} configureGame={configureGame} gameMode={gameMode}/>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n}\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Game from './components/game/Game';\r\nimport gameStyle from './components/game/Game.module.css'\r\n\r\nfunction App() {\r\n    return (\r\n        <div>\r\n            <h3 style={{ textAlign: 'center' }}>\r\n                Gomoku Online\r\n            </h3>\r\n            <Game />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}